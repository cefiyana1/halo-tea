"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._internals = void 0;
const useDownload_js_1 = require("./useDownload.js");
const semver_js_1 = __importDefault(require("../utils/semver.js"));
const useFetch_js_1 = __importDefault(require("./useFetch.js"));
const host_js_1 = __importDefault(require("../utils/host.js"));
const Path_js_1 = __importDefault(require("../utils/Path.js"));
require("../utils/misc.js");
const select = async (rq) => {
    const versions = await exports._internals.get(rq);
    if ("constraint" in rq) {
        return rq.constraint.max(versions);
    }
    else if (versions.find(x => x.eq(rq.version))) {
        return rq.version;
    }
};
const get = async (rq) => {
    const { platform, arch } = (0, host_js_1.default)();
    const url = new URL('https://dist.tea.xyz');
    url.pathname = Path_js_1.default.root.join(rq.project, platform, arch, 'versions.txt').string;
    const rsp = await (0, useFetch_js_1.default)(url);
    if (!rsp.ok) {
        throw new useDownload_js_1.DownloadError(rsp.status, { src: url });
    }
    const releases = await rsp.text();
    let versions = releases.split("\n").compact(x => new semver_js_1.default(x));
    if (versions.length < 1)
        throw new Error();
    if (rq.project == 'openssl.org') {
        // workaround our previous sins
        const v = new semver_js_1.default("1.1.118");
        versions = versions.filter(x => x.neq(v));
    }
    return versions;
};
function useInventory() {
    return { select, get };
}
exports.default = useInventory;
exports._internals = { get };
