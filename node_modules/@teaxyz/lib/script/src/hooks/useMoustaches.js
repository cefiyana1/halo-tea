"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const useConfig_js_1 = __importDefault(require("./useConfig.js"));
const useCellar_js_1 = __importDefault(require("./useCellar.js"));
const host_js_1 = __importDefault(require("../utils/host.js"));
const os = __importStar(require("os"));
function tokenizePackage(pkg) {
    return [{ from: "prefix", to: (0, useCellar_js_1.default)().keg(pkg).string }];
}
function tokenizeVersion(version, prefix = 'version') {
    const rv = [
        { from: prefix, to: `${version}` },
        { from: `${prefix}.major`, to: `${version.major}` },
        { from: `${prefix}.minor`, to: `${version.minor}` },
        { from: `${prefix}.patch`, to: `${version.patch}` },
        { from: `${prefix}.marketing`, to: `${version.major}.${version.minor}` },
        { from: `${prefix}.build`, to: version.build.join('+') },
        { from: `${prefix}.raw`, to: version.raw },
    ];
    if ('tag' in version) {
        rv.push({ from: `${prefix}.tag`, to: version.tag });
    }
    return rv;
}
//TODO replace `hw` with `host`
function tokenizeHost() {
    const { arch, target, platform } = (0, host_js_1.default)();
    return [
        { from: "hw.arch", to: arch },
        { from: "hw.target", to: target },
        { from: "hw.platform", to: platform },
        { from: "hw.concurrency", to: os.cpus().length.toString() }
    ];
}
function apply(input, map) {
    return map.reduce((acc, { from, to }) => acc.replace(new RegExp(`(^\\$)?{{\\s*${from}\\s*}}`, "g"), to), input);
}
function default_1() {
    const config = (0, useConfig_js_1.default)();
    const base = {
        apply,
        tokenize: {
            version: tokenizeVersion,
            host: tokenizeHost,
            pkg: tokenizePackage
        }
    };
    const deps = (deps) => {
        const map = [];
        for (const dep of deps ?? []) {
            map.push({ from: `deps.${dep.pkg.project}.prefix`, to: dep.path.string });
            map.push(...base.tokenize.version(dep.pkg.version, `deps.${dep.pkg.project}.version`));
        }
        return map;
    };
    const tea = () => [{ from: "tea.prefix", to: config.prefix.string }];
    const all = (pkg, deps_) => [
        ...deps(deps_),
        ...tokenizePackage(pkg),
        ...tea(),
        ...base.tokenize.version(pkg.version),
        ...base.tokenize.host(),
    ];
    return {
        apply: base.apply,
        tokenize: {
            ...base.tokenize,
            deps, tea, all
        }
    };
}
exports.default = default_1;
