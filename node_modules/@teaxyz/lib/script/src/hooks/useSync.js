"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// deno-lint-ignore-file no-deprecated-deno-api
// ^^ Deno.Command is not implemented for dnt shims yet
const dntShim = __importStar(require("../../_dnt.shims.js"));
const deps_js_1 = require("../deps.js");
const { streams: { writeAll } } = deps_js_1.deno;
const flock_node_js_1 = require("../utils/flock.node.js");
const useDownload_js_1 = __importDefault(require("./useDownload.js"));
const usePantry_js_1 = __importDefault(require("./usePantry.js"));
const useConfig_js_1 = __importDefault(require("./useConfig.js"));
async function default_1(logger) {
    const pantry_dir = (0, usePantry_js_1.default)().prefix.parent();
    logger?.syncing(pantry_dir);
    const { rid } = await dntShim.Deno.open(pantry_dir.mkdir('p').string);
    await (0, flock_node_js_1.flock)(rid, 'ex');
    try {
        //TODO if there was already a lock, just wait on it, don’t do the following stuff
        const git_dir = pantry_dir.parent().join("pantries/teaxyz/pantry");
        if (git_dir.join("HEAD").isFile()) {
            await git("-C", git_dir, "fetch", "--quiet", "origin", "--force", "main:main");
        }
        else {
            await git("clone", "--quiet", "--bare", "--depth=1", "https://github.com/teaxyz/pantry", git_dir);
        }
        await git("--git-dir", git_dir, "--work-tree", pantry_dir, "checkout", "--quiet", "--force");
    }
    catch {
        // git failure or no git installed
        // ∴ download the latest tarball and uncompress over the top
        //FIXME deleted packages will not be removed with this method
        const src = new URL(`https://github.com/teaxyz/pantry/archive/refs/heads/main.tar.gz`);
        const proc = dntShim.Deno.run({
            cmd: ["tar", "xz", "--strip-components=1"],
            cwd: pantry_dir.string,
            stdin: "piped"
        });
        await (0, useDownload_js_1.default)().download({ src }, blob => writeAll(proc.stdin, blob));
        proc.stdin.close();
        if (!(await proc.status()).success) {
            throw new Error("untar failed");
        }
        proc.close();
    }
    finally {
        await (0, flock_node_js_1.flock)(rid, 'un');
        dntShim.Deno.close(rid); // docs aren't clear if we need to do this or not
    }
    logger?.syncd(pantry_dir);
}
exports.default = default_1;
//////////////////////// utils
async function git(...args) {
    const { git } = (0, useConfig_js_1.default)();
    if (!git)
        throw new Error("no-git"); // caught above to trigger http download instead
    await run({ cmd: [git, ...args] });
}
async function run(opts) {
    const cmd = opts.cmd.map(x => `${x}`);
    const proc = dntShim.Deno.run({ ...opts, cmd, stdout: 'null', clearEnv: true });
    try {
        const exit = await proc.status();
        if (!exit.success)
            throw new Error(`run.exit(${exit.code})`);
    }
    catch (err) {
        err.cause = proc;
        throw err;
    }
    finally {
        proc.close();
    }
}
