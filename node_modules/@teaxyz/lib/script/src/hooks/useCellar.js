"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.InstallationNotFoundError = void 0;
const error_js_1 = require("../utils/error.js");
const pkgutils = __importStar(require("../utils/pkg.js"));
const semver_js_1 = __importDefault(require("../utils/semver.js"));
const useConfig_js_1 = __importDefault(require("./useConfig.js"));
const Path_js_1 = __importDefault(require("../utils/Path.js"));
class InstallationNotFoundError extends error_js_1.TeaError {
    constructor(pkg) {
        super(`not found: ${pkgutils.str(pkg)}`);
        Object.defineProperty(this, "pkg", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pkg = pkg;
    }
}
exports.InstallationNotFoundError = InstallationNotFoundError;
function useCellar() {
    const config = (0, useConfig_js_1.default)();
    /// eg. ~/.tea/deno.land
    const shelf = (project) => config.prefix.join(project);
    /// eg. ~/.tea/deno.land/v1.2.3
    const keg = (pkg) => shelf(pkg.project).join(`v${pkg.version}`);
    /// returns the `Installation` if the pkg is installed
    const has = (pkg) => resolve(pkg).swallow(InstallationNotFoundError);
    return {
        has,
        ls,
        keg,
        resolve,
        shelf,
    };
    /// returns a projectâ€™s installations (sorted by version)
    async function ls(project) {
        const d = shelf(project);
        if (!d.isDirectory())
            return [];
        const rv = [];
        for await (const [path, { name, isDirectory }] of d.ls()) {
            try {
                if (!isDirectory)
                    continue;
                if (!name.startsWith("v") || name == 'var')
                    continue;
                const version = new semver_js_1.default(name);
                if (await vacant(path))
                    continue; // failed build probs
                rv.push({ path, pkg: { project, version } });
            }
            catch {
                //noop: other directories can exist
            }
        }
        return rv.sort((a, b) => pkgutils.compare(a.pkg, b.pkg));
    }
    /// if package is installed, returns its installation
    async function resolve(pkg) {
        const installation = await (async () => {
            if ("pkg" in pkg) {
                return pkg;
            }
            // ^^ is `Installation`
            const { prefix } = config;
            if (pkg instanceof Path_js_1.default) {
                const path = pkg;
                const version = new semver_js_1.default(path.basename());
                const project = path.parent().relative({ to: prefix });
                return {
                    path, pkg: { project, version }
                };
            }
            else if ("version" in pkg) {
                const path = keg(pkg);
                return { path, pkg };
            }
            else {
                const installations = await ls(pkg.project);
                const versions = installations.map(({ pkg: { version } }) => version);
                const version = pkg.constraint.max(versions);
                if (version) {
                    const path = installations.find(({ pkg: { version: v } }) => v.eq(version)).path;
                    return { path, pkg: { project: pkg.project, version } };
                }
                else {
                    throw new InstallationNotFoundError(pkg);
                }
            }
        })();
        if (await vacant(installation.path)) {
            throw new InstallationNotFoundError(installation.pkg);
        }
        return installation;
    }
}
exports.default = useCellar;
/// if we ignore transient files, is there a package here?
async function vacant(path) {
    if (!path.isDirectory()) {
        return true;
    }
    else
        for await (const _ of path.ls()) {
            return false;
        }
    return true;
}
