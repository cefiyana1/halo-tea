import { PlainObject } from "../deps.js";
declare function validate_str(input: unknown): string;
declare function validate_plain_obj(input: unknown): PlainObject;
declare function validate_arr<T>(input: unknown): Array<T>;
declare const validate: {
    str: typeof validate_str;
    obj: typeof validate_plain_obj;
    arr: typeof validate_arr;
};
export { validate };
declare global {
    interface Array<T> {
        compact<S>(body?: (t: T) => S | null | undefined | false, opts?: {
            rescue: boolean;
        }): Array<S>;
    }
    interface Set<T> {
        insert(t: T): {
            inserted: boolean;
        };
    }
}
export declare function flatmap<S, T>(t: T | undefined | null, body: (t: T) => S | undefined, opts?: {
    rescue?: boolean;
}): NonNullable<S> | undefined;
export declare function async_flatmap<S, T>(t: Promise<T | undefined | null>, body: (t: T) => Promise<S> | undefined, opts?: {
    rescue?: boolean;
}): Promise<NonNullable<S> | undefined>;
declare global {
    interface String {
        chuzzle(): string | undefined;
    }
    interface Number {
        chuzzle(): number | undefined;
    }
}
