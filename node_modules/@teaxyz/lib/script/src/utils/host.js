"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports._internals = exports.SupportedArchitectures = exports.SupportedPlatforms = void 0;
const dntShim = __importStar(require("../../_dnt.shims.js"));
const process_1 = __importDefault(require("process"));
// when we support more variants of these that require specification
// we will tuple a version in with each eg. 'darwin' | ['windows', 10 | 11 | '*']
exports.SupportedPlatforms = ["darwin", "linux", "windows"];
exports.SupportedArchitectures = ["x86-64", "aarch64"];
function host() {
    const platform = (() => {
        const platform = _internals.platform();
        switch (platform) {
            case "darwin":
            case "linux":
            case "windows":
                return platform;
            default:
                console.warn(`operating incognito as linux (${platform})`);
                return 'linux';
        }
    })();
    const arch = (() => {
        const arch = _internals.arch();
        switch (arch) {
            case "arm64":
                return "aarch64";
            case "x64":
                return "x86-64";
            default:
                throw new Error(`unsupported-arch: ${arch}`);
        }
    })();
    const { target } = dntShim.Deno.build;
    return {
        platform,
        arch,
        target,
        build_ids: [platform, arch]
    };
}
exports.default = host;
const _internals = {
    arch: () => process_1.default.arch,
    platform: () => dntShim.Deno.build.os
};
exports._internals = _internals;
