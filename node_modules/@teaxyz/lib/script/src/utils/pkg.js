"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.str = exports.compare = exports.parse = void 0;
const semver = __importStar(require("./semver.js"));
/// allows inputs `nodejs.org@16` when `semver.parse` would reject
function parse(input) {
    const match = input.match(/^(.+?)([\^=~<>@].+)?$/);
    if (!match)
        throw new Error(`invalid pkgspec: ${input}`);
    if (!match[2])
        match[2] = "*";
    const project = match[1];
    if (match[2] == "@latest") {
        return { project, constraint: new semver.Range('*') };
    }
    else {
        const constraint = new semver.Range(match[2]);
        return { project, constraint };
    }
}
exports.parse = parse;
function compare(a, b) {
    return a.project === b.project
        ? a.version.compare(b.version)
        : a.project.localeCompare(b.project);
}
exports.compare = compare;
function str(pkg) {
    if (!("constraint" in pkg)) {
        return `${pkg.project}=${pkg.version}`;
    }
    else if (pkg.constraint.set === "*") {
        return pkg.project;
    }
    else {
        return `${pkg.project}${pkg.constraint}`;
    }
}
exports.str = str;
