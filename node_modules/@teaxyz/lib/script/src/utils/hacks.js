"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.validatePackageRequirement = void 0;
const deps_js_1 = require("../deps.js");
const { isString, isNumber } = deps_js_1.is_what;
const semver = __importStar(require("./semver.js"));
const host_js_1 = __importDefault(require("./host.js"));
function validatePackageRequirement(project, constraint) {
    if ((0, host_js_1.default)().platform == 'darwin' && (project == "apple.com/xcode/clt" || project == "tea.xyz/gx/make")) {
        // Apple will error out and prompt the user to install when the tool is used
        return; // compact this dep away
    }
    if ((0, host_js_1.default)().platform == 'linux' && project == "tea.xyz/gx/make") {
        project = "gnu.org/make";
        constraint = '*';
    }
    if (constraint == 'c99' && project == 'tea.xyz/gx/cc') {
        constraint = '^0.1';
    }
    if (isNumber(constraint)) {
        constraint = `^${constraint}`;
    }
    else if (!isString(constraint)) {
        throw new Error(`invalid constraint for ${project}: ${constraint}`);
    }
    return {
        project,
        constraint: new semver.Range(constraint)
    };
}
exports.validatePackageRequirement = validatePackageRequirement;
