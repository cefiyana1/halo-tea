"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const dntShim = __importStar(require("../../_dnt.shims.js"));
const semver = __importStar(require("../utils/semver.js"));
const useCellar_js_1 = __importDefault(require("../hooks/useCellar.js"));
const error_js_1 = require("../utils/error.js");
const promises_1 = __importDefault(require("fs/promises"));
async function link(pkg) {
    const installation = await (0, useCellar_js_1.default)().resolve(pkg);
    pkg = installation.pkg;
    const versions = (await (0, useCellar_js_1.default)()
        .ls(installation.pkg.project))
        .map(({ pkg: { version }, path }) => [version, path])
        .sort(([a], [b]) => a.compare(b));
    if (versions.length <= 0) {
        const err = new Error('no versions');
        err.cause = pkg;
        throw err;
    }
    const shelf = installation.path.parent();
    const newest = versions.slice(-1)[0];
    const vMm = `${pkg.version.major}.${pkg.version.minor}`;
    const minorRange = new semver.Range(`^${vMm}`);
    const mostMinor = versions.filter(v => minorRange.satisfies(v[0])).at(-1) ?? (0, error_js_1.panic)();
    if (mostMinor[0].neq(pkg.version))
        return;
    // ^^ if we’re not the most minor we definitely not the most major
    await makeSymlink(`v${vMm}`);
    const majorRange = new semver.Range(`^${pkg.version.major.toString()}`);
    const mostMajor = versions.filter(v => majorRange.satisfies(v[0])).at(-1) ?? (0, error_js_1.panic)();
    if (mostMajor[0].neq(pkg.version))
        return;
    // ^^ if we’re not the most major we definitely aren’t the newest
    await makeSymlink(`v${pkg.version.major}`);
    if (pkg.version.eq(newest[0])) {
        await makeSymlink('v*');
    }
    async function makeSymlink(symname) {
        try {
            const what_we_make = shelf.join(symname);
            if (what_we_make.isSymlink()) {
                try {
                    // using this rather than rm due to bug in deno shims that
                    // tries to call rmdir on the symlink because the symlink points to a dir
                    await promises_1.default.unlink(what_we_make.string);
                }
                catch (err) {
                    // we were deleted by another thing linking simultaneously
                    //FIXME our flock should surround the link step too
                    if (err.code != 'ENOENT')
                        throw err;
                }
            }
            await dntShim.Deno.symlink(installation.path.basename(), // makes it relative
            shelf.join(symname).rm().string, { type: 'dir' });
        }
        catch (err) {
            if (err instanceof dntShim.Deno.errors.AlreadyExists || err.code === 'EEXIST') {
                //FIXME race condition for installing the same pkg simultaneously
                // real fix is to lock around the entire download/untar/link process
                return;
            }
            else {
                throw err;
            }
        }
    }
}
exports.default = link;
