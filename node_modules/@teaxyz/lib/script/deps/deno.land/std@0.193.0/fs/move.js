"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.moveSync = exports.move = exports.SubdirectoryMoveError = void 0;
// Copyright 2018-2023 the Deno authors. All rights reserved. MIT license.
const dntShim = __importStar(require("../../../../_dnt.shims.js"));
const _util_js_1 = require("./_util.js");
const EXISTS_ERROR = new dntShim.Deno.errors.AlreadyExists("dest already exists.");
class SubdirectoryMoveError extends Error {
    constructor(src, dest) {
        super(`Cannot move '${src}' to a subdirectory of itself, '${dest}'.`);
    }
}
exports.SubdirectoryMoveError = SubdirectoryMoveError;
/**
 * Moves a file or directory.
 *
 * @example
 * ```ts
 * import { move } from "https://deno.land/std@$STD_VERSION/fs/mod.ts";
 *
 * move("./foo", "./bar"); // returns a promise
 * ```
 */
async function move(src, dest, { overwrite = false } = {}) {
    const srcStat = await dntShim.Deno.stat(src);
    if (srcStat.isDirectory &&
        ((0, _util_js_1.isSubdir)(src, dest) || (0, _util_js_1.isSamePath)(src, dest))) {
        throw new SubdirectoryMoveError(src, dest);
    }
    if (overwrite) {
        if ((0, _util_js_1.isSamePath)(src, dest))
            return;
        try {
            await dntShim.Deno.remove(dest, { recursive: true });
        }
        catch (error) {
            if (!(error instanceof dntShim.Deno.errors.NotFound)) {
                throw error;
            }
        }
    }
    else {
        try {
            await dntShim.Deno.lstat(dest);
            return Promise.reject(EXISTS_ERROR);
        }
        catch {
            // Do nothing...
        }
    }
    await dntShim.Deno.rename(src, dest);
}
exports.move = move;
/**
 * Moves a file or directory synchronously.
 * @example
 * ```ts
 * import { moveSync } from "https://deno.land/std@$STD_VERSION/fs/mod.ts";
 *
 * moveSync("./foo", "./bar"); // void
 * ```
 */
function moveSync(src, dest, { overwrite = false } = {}) {
    const srcStat = dntShim.Deno.statSync(src);
    if (srcStat.isDirectory &&
        ((0, _util_js_1.isSubdir)(src, dest) || (0, _util_js_1.isSamePath)(src, dest))) {
        throw new SubdirectoryMoveError(src, dest);
    }
    if (overwrite) {
        if ((0, _util_js_1.isSamePath)(src, dest))
            return;
        try {
            dntShim.Deno.removeSync(dest, { recursive: true });
        }
        catch (error) {
            if (!(error instanceof dntShim.Deno.errors.NotFound)) {
                throw error;
            }
        }
    }
    else {
        try {
            dntShim.Deno.lstatSync(dest);
            throw EXISTS_ERROR;
        }
        catch (error) {
            if (error === EXISTS_ERROR) {
                throw error;
            }
        }
    }
    dntShim.Deno.renameSync(src, dest);
}
exports.moveSync = moveSync;
