import install, { ConsoleLogger as BaseConsoleLogger } from "../plumbing/install.js";
import resolve from "../plumbing/resolve.js";
import usePantry from "../hooks/usePantry.js";
import hydrate from "../plumbing/hydrate.js";
import useSync from "../hooks/useSync.js";
import { parse } from "../utils/pkg.js";
import link from "../plumbing/link.js";
import { is_what } from "../deps.js";
const { isString } = is_what;
// deno-lint-ignore no-explicit-any
export function ConsoleLogger(prefix) {
    prefix = prefix ? `${prefix}: ` : "";
    return {
        ...BaseConsoleLogger(prefix),
        progress: function () { console.error(`${prefix}progress`, ...arguments); },
    };
}
/// eg. install("python.org~3.10")
export default async function (pkgs, logger) {
    if (isString(pkgs))
        pkgs = pkgs.split(/\s+/);
    pkgs = pkgs.map(pkg => isString(pkg) ? parse(pkg) : pkg);
    const pantry = usePantry();
    if (pantry.missing() || pantry.neglected()) {
        await useSync();
    }
    //TODO parallelize!
    pkgs = (await hydrate(pkgs)).pkgs;
    const resolution = await resolve(pkgs);
    logger?.resolved?.(resolution);
    const { pending, installed } = resolution;
    logger = WrapperLogger(pending, logger);
    const installers = pending
        .map(pkg => install(pkg, logger)
        .then(i => link(i).then(() => i)));
    installed.push(...await Promise.all(installers));
    return installed;
}
function WrapperLogger(pending, logger) {
    if (!logger?.progress)
        return logger;
    const projects = pending.map(pkg => pkg.project);
    const totals = {};
    const progresses = {};
    return {
        ...logger,
        downloading: args => {
            const { pkg: { project }, total } = args;
            if (total) {
                totals[project] = total;
                updateProgress();
            }
            if (logger?.downloading) {
                logger.downloading(args);
            }
        },
        installing: args => {
            const { pkg: { project }, progress } = args;
            if (progress) {
                progresses[project] = progress;
                updateProgress();
            }
            if (logger?.installing) {
                logger.installing(args);
            }
        }
    };
    function updateProgress() {
        let total_untard_bytes = 0;
        let grand_total = 0;
        for (const project of projects) {
            const total = totals[project];
            const bytes = progresses[project] * total;
            total_untard_bytes += bytes;
            grand_total += total;
        }
        const rv = total_untard_bytes / grand_total;
        if (!isNaN(rv)) {
            logger.progress(total_untard_bytes / grand_total);
        }
    }
}
