import { Logger } from "../plumbing/install.js";
import { TeaError } from "../utils/error.js";
import Path from "../utils/Path.js";
interface OptsEx {
    env?: Record<string, string | undefined>;
    logger?: Logger;
}
type Cmd = string | (string | Path)[];
export default function run(cmd: Cmd, opts?: OptsEx): Promise<void>;
export default function run(cmd: Cmd, opts: {
    stdout: true;
} & OptsEx): Promise<{
    stdout: string;
}>;
export default function run(cmd: Cmd, opts: {
    stderr: true;
} & OptsEx): Promise<{
    stderr: string;
}>;
export default function run(cmd: Cmd, opts: {
    status: true;
} & OptsEx): Promise<{
    status: number;
}>;
export default function run(cmd: Cmd, opts: {
    stdout: true;
    stderr: true;
} & OptsEx): Promise<{
    stdout: string;
    stderr: string;
}>;
export default function run(cmd: Cmd, opts: {
    stdout: true;
    status: true;
} & OptsEx): Promise<{
    stdout: string;
    status: number;
}>;
export default function run(cmd: Cmd, opts: {
    stderr: true;
    status: true;
} & OptsEx): Promise<{
    stderr: string;
    status: number;
}>;
export default function run(cmd: Cmd, opts: {
    stdout: true;
    stderr: true;
    status: true;
} & OptsEx): Promise<{
    stdout: string;
    stderr: string;
    status: number;
}>;
type RunErrorCode = 'ENOENT' | 'EUSAGE' | 'EIO';
export declare class RunError extends TeaError {
    code: RunErrorCode;
    constructor(code: RunErrorCode, message: string);
}
export {};
