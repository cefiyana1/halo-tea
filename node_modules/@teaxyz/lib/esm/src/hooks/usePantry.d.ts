import { is_what, PlainObject } from "../deps.js";
import { Package, Installation } from "../types.js";
import { TeaError } from "../utils/error.js";
import SemVer from "../utils/semver.js";
import Path from "../utils/Path.js";
export interface Interpreter {
    project: string;
    args: string[];
}
export declare class PantryError extends TeaError {
}
export declare class PantryParseError extends PantryError {
    project: string;
    path?: Path;
    constructor(project: string, path?: Path, cause?: unknown);
}
export declare class PackageNotFoundError extends PantryError {
    project: string;
    constructor(project: string);
}
export declare class PantryNotFoundError extends PantryError {
    constructor(path: Path);
}
export default function usePantry(): {
    prefix: Path;
    which: ({ interprets: extension }: {
        interprets: string;
    }) => Promise<Interpreter | undefined>;
    ls: () => AsyncGenerator<LsEntry>;
    project: (input: string | {
        project: string;
    }) => {
        companions: () => Promise<import("../types.js").PackageRequirement[]>;
        runtime: {
            env: (version: SemVer, deps: Installation[]) => Promise<Record<string, string>>;
            deps: () => Promise<import("../types.js").PackageRequirement[]>;
        };
        available: () => Promise<boolean>;
        provides: () => Promise<string[]>;
        provider: () => Promise<((binname: string) => string[] | undefined) | undefined>;
        yaml: () => Promise<is_what.PlainObject>;
    };
    parse_pkgs_node: typeof parse_pkgs_node;
    expand_env_obj: typeof expand_env_obj;
    missing: () => boolean;
    neglected: () => boolean;
};
export declare function parse_pkgs_node(node: any): import("../types.js").PackageRequirement[];
export declare function expand_env_obj(env_: PlainObject, pkg: Package, deps: Installation[]): Record<string, string>;
interface LsEntry {
    project: string;
    path: Path;
}
export {};
