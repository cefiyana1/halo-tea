import { DownloadError } from "./useDownload.js";
import SemVer from "../utils/semver.js";
import useFetch from "./useFetch.js";
import host from "../utils/host.js";
import Path from "../utils/Path.js";
import "../utils/misc.js";
const select = async (rq) => {
    const versions = await _internals.get(rq);
    if ("constraint" in rq) {
        return rq.constraint.max(versions);
    }
    else if (versions.find(x => x.eq(rq.version))) {
        return rq.version;
    }
};
const get = async (rq) => {
    const { platform, arch } = host();
    const url = new URL('https://dist.tea.xyz');
    url.pathname = Path.root.join(rq.project, platform, arch, 'versions.txt').string;
    const rsp = await useFetch(url);
    if (!rsp.ok) {
        throw new DownloadError(rsp.status, { src: url });
    }
    const releases = await rsp.text();
    let versions = releases.split("\n").compact(x => new SemVer(x));
    if (versions.length < 1)
        throw new Error();
    if (rq.project == 'openssl.org') {
        // workaround our previous sins
        const v = new SemVer("1.1.118");
        versions = versions.filter(x => x.neq(v));
    }
    return versions;
};
export default function useInventory() {
    return { select, get };
}
export const _internals = { get };
