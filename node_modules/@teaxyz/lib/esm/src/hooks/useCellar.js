import { TeaError } from "../utils/error.js";
import * as pkgutils from "../utils/pkg.js";
import SemVer from "../utils/semver.js";
import useConfig from "./useConfig.js";
import Path from "../utils/Path.js";
export class InstallationNotFoundError extends TeaError {
    constructor(pkg) {
        super(`not found: ${pkgutils.str(pkg)}`);
        Object.defineProperty(this, "pkg", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.pkg = pkg;
    }
}
export default function useCellar() {
    const config = useConfig();
    /// eg. ~/.tea/deno.land
    const shelf = (project) => config.prefix.join(project);
    /// eg. ~/.tea/deno.land/v1.2.3
    const keg = (pkg) => shelf(pkg.project).join(`v${pkg.version}`);
    /// returns the `Installation` if the pkg is installed
    const has = (pkg) => resolve(pkg).swallow(InstallationNotFoundError);
    return {
        has,
        ls,
        keg,
        resolve,
        shelf,
    };
    /// returns a projectâ€™s installations (sorted by version)
    async function ls(project) {
        const d = shelf(project);
        if (!d.isDirectory())
            return [];
        const rv = [];
        for await (const [path, { name, isDirectory }] of d.ls()) {
            try {
                if (!isDirectory)
                    continue;
                if (!name.startsWith("v") || name == 'var')
                    continue;
                const version = new SemVer(name);
                if (await vacant(path))
                    continue; // failed build probs
                rv.push({ path, pkg: { project, version } });
            }
            catch {
                //noop: other directories can exist
            }
        }
        return rv.sort((a, b) => pkgutils.compare(a.pkg, b.pkg));
    }
    /// if package is installed, returns its installation
    async function resolve(pkg) {
        const installation = await (async () => {
            if ("pkg" in pkg) {
                return pkg;
            }
            // ^^ is `Installation`
            const { prefix } = config;
            if (pkg instanceof Path) {
                const path = pkg;
                const version = new SemVer(path.basename());
                const project = path.parent().relative({ to: prefix });
                return {
                    path, pkg: { project, version }
                };
            }
            else if ("version" in pkg) {
                const path = keg(pkg);
                return { path, pkg };
            }
            else {
                const installations = await ls(pkg.project);
                const versions = installations.map(({ pkg: { version } }) => version);
                const version = pkg.constraint.max(versions);
                if (version) {
                    const path = installations.find(({ pkg: { version: v } }) => v.eq(version)).path;
                    return { path, pkg: { project: pkg.project, version } };
                }
                else {
                    throw new InstallationNotFoundError(pkg);
                }
            }
        })();
        if (await vacant(installation.path)) {
            throw new InstallationNotFoundError(installation.pkg);
        }
        return installation;
    }
}
/// if we ignore transient files, is there a package here?
async function vacant(path) {
    if (!path.isDirectory()) {
        return true;
    }
    else
        for await (const _ of path.ls()) {
            return false;
        }
    return true;
}
